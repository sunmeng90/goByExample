package main

import "fmt"

func main() {
	//prob1()
	prob2()
}

//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//
//Find the sum of all the multiples of 3 or 5 below 1000.
func prob1() {
	result := make([]int, 0, 10)
	for i := 1; i < 1000; i++ {
		if i%3 == 0 || i%5 == 0 {
			result = append(result, i)
		}
	}
	fmt.Println(result)

}

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

func prob2() {
	nextFib := fibWrapper()
	nextVal := nextFib()
	sum := 0
	for nextVal <= 4000000 {
		if nextVal%2 == 0 {
			sum += nextVal
		}
		nextVal = nextFib()
	}
	fmt.Println(sum)
}

func fib(n int) int {
	if n == 1 || n == 2 {
		return n
	}
	return fib(n-1) + fib(n-2)
}

func fibWrapper() func() int {
	a, b := 0, 1
	return func() int {
		nextVal := a + b
		a, b = b, nextVal
		return nextVal
	}
}
